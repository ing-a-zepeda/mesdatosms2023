################################################
## Powershell Script to Kickoff Salt Minion   ##
##    installation on Windows machines        ##
##                                            ##
##      Maintainer: Syntax DevOps Team        ##
################################################

[CmdletBinding()]
param
(
    # region contains all needed variables to install salt-minion
    [Parameter(Mandatory=$true)]
    [ValidateSet("prvrdu", "prvedc", "prvmdc", "prvpdc", "prvwhm","awseast","noregion","prvctx","azureeast")]
    [string]
    $region,

    # This will only output debug information
    [Parameter(Mandatory=$false)]
    [switch]$debugonly,

    # Override saltmaster
    [Parameter(Mandatory=$false)]
    [string]$saltmaster
    
)

Begin
{
    $starterscriptversion = "22.9.29"

    switch ($region) {
        "prvrdu" {
            $global:region_saltmaster = "10.130.103.213"
        }
        "prvpdc" {
            $global:region_saltmaster = "100.72.17.46"
        }
        "prvedc" {
            $global:region_saltmaster = "100.64.17.33"
        }
        "prvmdc" {
            $global:region_saltmaster = "100.80.17.46"
        }
        "prvwhm" {
            $global:region_saltmaster = ""
        }
        "awseast" {
            $global:region_saltmaster = "100.92.130.172"
        }
        "prvctx" {
            $global:region_saltmaster = "10.130.103.213"
        }
        "noregion"{
            $global:region_saltmaster = "10.10.1.2"
        }
        "azureeast"{
            $global:region_saltmaster = "saltmaster02.syntax.azure.internal"
        }
        Default {
            $global:region_saltmaster = "salt"
        }
    }


    # if $saltmaster override was passed
    if(-not $saltmaster){
        $saltmaster = $region_saltmaster
    }
    $script_url = "http://${saltmaster}:9080/installers/windows/install.ps1"    
    $install_salt_path = "$($env:tmp)\salt-minion-install.ps1"

}

Process
{
    Write-verbose "Starter Script version: $starterscriptversion"
    Write-host "Getting Installation script from : $saltmaster"
    Write-verbose "Script URL: $script_url"

	try
	{
        Invoke-WebRequest -Uri $script_url -OutFile $install_salt_path -TimeoutSec 10  -ErrorAction Stop
		if ((Get-Item $install_salt_path).Length -gt 1)
		{
			Write-Verbose "Installation script downloaded to $install_salt_path"
		}
	}
	catch
	{
		$_.Exception.Message
		break
	}


    $options = @()
    if($saltmaster){
        $options += "-saltmaster $saltmaster" 
    }

    if($debugonly){
        $options += "-debugonly" 
    }

    $inline_options = $options -join " "
    Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
    Write-Verbose " Running $install_salt_path -region $region $inline_options"
    Invoke-Expression "& $install_salt_path -region $region $inline_options"
    Set-ExecutionPolicy -ExecutionPolicy Undefined -Scope CurrentUser

}
end{
    if(Test-Path -Path $install_salt_path -ErrorAction SilentlyContinue){
        Write-Verbose "Cleaning up temporary files... "
        Remove-Item -Path $install_salt_path -Force
    }   
}
